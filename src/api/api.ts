/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AverageRatingResponseDTO
 */
export interface AverageRatingResponseDTO {
    /**
     * 
     * @type {number}
     * @memberof AverageRatingResponseDTO
     */
    'averageRating'?: number;
    /**
     * 
     * @type {number}
     * @memberof AverageRatingResponseDTO
     */
    'numberOfOpinions'?: number;
}
/**
 * Model of a category
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'photographUrl'?: string;
}
/**
 * 
 * @export
 * @interface CategoryAddCommand
 */
export interface CategoryAddCommand {
    /**
     * Name of the category
     * @type {string}
     * @memberof CategoryAddCommand
     */
    'name': string;
    /**
     * URL to photo of the category
     * @type {string}
     * @memberof CategoryAddCommand
     */
    'photographUrl'?: string;
}
/**
 * 
 * @export
 * @interface Config
 */
export interface Config {
    /**
     * 
     * @type {number}
     * @memberof Config
     */
    'id'?: number;
    /**
     * Name of the restaurant
     * @type {string}
     * @memberof Config
     */
    'restaurantName': string;
    /**
     * Postal code of the restaurant
     * @type {string}
     * @memberof Config
     */
    'postalCode': string;
    /**
     * City of the restaurant
     * @type {string}
     * @memberof Config
     */
    'city': string;
    /**
     * Street of the restaurant
     * @type {string}
     * @memberof Config
     */
    'street': string;
    /**
     * Phone number of the restaurant
     * @type {string}
     * @memberof Config
     */
    'phoneNumber': string;
    /**
     * Email of the restaurant
     * @type {string}
     * @memberof Config
     */
    'email': string;
    /**
     * URL for the logo
     * @type {string}
     * @memberof Config
     */
    'logoUrl': string;
}
/**
 * 
 * @export
 * @interface ConfigAddCommand
 */
export interface ConfigAddCommand {
    /**
     * Name of the restaurant
     * @type {string}
     * @memberof ConfigAddCommand
     */
    'restaurantName': string;
    /**
     * Postal code of the restaurant
     * @type {string}
     * @memberof ConfigAddCommand
     */
    'postalCode': string;
    /**
     * City of the restaurant
     * @type {string}
     * @memberof ConfigAddCommand
     */
    'city': string;
    /**
     * Street of the restaurant
     * @type {string}
     * @memberof ConfigAddCommand
     */
    'street': string;
    /**
     * Phone number of the restaurant
     * @type {string}
     * @memberof ConfigAddCommand
     */
    'phoneNumber': string;
    /**
     * Email of the restaurant
     * @type {string}
     * @memberof ConfigAddCommand
     */
    'email': string;
    /**
     * URL for the logo
     * @type {string}
     * @memberof ConfigAddCommand
     */
    'logoUrl': string;
    /**
     * Opening hours of the restaurant
     * @type {Array<OpeningHour>}
     * @memberof ConfigAddCommand
     */
    'openingHours'?: Array<OpeningHour>;
    /**
     * Delivery prices of the restaurant
     * @type {Array<DeliveryPricing>}
     * @memberof ConfigAddCommand
     */
    'deliveryPricings'?: Array<DeliveryPricing>;
}
/**
 * 
 * @export
 * @interface ContactFormCommand
 */
export interface ContactFormCommand {
    /**
     * Sender\'s name
     * @type {string}
     * @memberof ContactFormCommand
     */
    'name'?: string;
    /**
     * E-mail of the sender
     * @type {string}
     * @memberof ContactFormCommand
     */
    'email'?: string;
    /**
     * Body of the e-mail message
     * @type {string}
     * @memberof ContactFormCommand
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface Coupon
 */
export interface Coupon {
    /**
     * 
     * @type {number}
     * @memberof Coupon
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Coupon
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof Coupon
     */
    'discountPercentage': number;
    /**
     * 
     * @type {Customer}
     * @memberof Coupon
     */
    'customer'?: Customer;
    /**
     * 
     * @type {Meal}
     * @memberof Coupon
     */
    'meal'?: Meal;
    /**
     * 
     * @type {string}
     * @memberof Coupon
     */
    'expiryDate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Coupon
     */
    'active': boolean;
}
/**
 * 
 * @export
 * @interface CouponAddCommand
 */
export interface CouponAddCommand {
    /**
     * Kod kuponu
     * @type {string}
     * @memberof CouponAddCommand
     */
    'code': string;
    /**
     * Percentage discount for meal
     * @type {number}
     * @memberof CouponAddCommand
     */
    'discountPercentage': number;
    /**
     * Client id
     * @type {number}
     * @memberof CouponAddCommand
     */
    'customerId': number;
    /**
     * Id of the discounted meal
     * @type {number}
     * @memberof CouponAddCommand
     */
    'mealId': number;
    /**
     * Expiry date of the coupon
     * @type {string}
     * @memberof CouponAddCommand
     */
    'expiryDate'?: string;
}
/**
 * 
 * @export
 * @interface Customer
 */
export interface Customer {
    /**
     * 
     * @type {number}
     * @memberof Customer
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'surname': string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'phone': string;
    /**
     * 
     * @type {Privilege}
     * @memberof Customer
     */
    'privilege'?: Privilege;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'resetToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'resetTokenExpiry'?: string;
}
/**
 * 
 * @export
 * @interface DeliveryPricing
 */
export interface DeliveryPricing {
    /**
     * 
     * @type {number}
     * @memberof DeliveryPricing
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof DeliveryPricing
     */
    'maximumRange': number;
    /**
     * 
     * @type {number}
     * @memberof DeliveryPricing
     */
    'price': number;
}
/**
 * 
 * @export
 * @interface LocalTime
 */
export interface LocalTime {
    /**
     * 
     * @type {number}
     * @memberof LocalTime
     */
    'hour'?: number;
    /**
     * 
     * @type {number}
     * @memberof LocalTime
     */
    'minute'?: number;
    /**
     * 
     * @type {number}
     * @memberof LocalTime
     */
    'second'?: number;
    /**
     * 
     * @type {number}
     * @memberof LocalTime
     */
    'nano'?: number;
}
/**
 * 
 * @export
 * @interface LoginCommand
 */
export interface LoginCommand {
    /**
     * Email
     * @type {string}
     * @memberof LoginCommand
     */
    'email'?: string;
    /**
     * Password
     * @type {string}
     * @memberof LoginCommand
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface LoginResponseDTO
 */
export interface LoginResponseDTO {
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDTO
     */
    'token'?: string;
    /**
     * 
     * @type {number}
     * @memberof LoginResponseDTO
     */
    'customerId'?: number;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDTO
     */
    'customerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDTO
     */
    'customerSurname'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDTO
     */
    'customerEmail'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LoginResponseDTO
     */
    'isAdmin'?: boolean;
}
/**
 * 
 * @export
 * @interface MakeReservationCommand
 */
export interface MakeReservationCommand {
    /**
     * Reservation day
     * @type {string}
     * @memberof MakeReservationCommand
     */
    'day'?: string;
    /**
     * 
     * @type {LocalTime}
     * @memberof MakeReservationCommand
     */
    'startTime': LocalTime;
    /**
     * 
     * @type {LocalTime}
     * @memberof MakeReservationCommand
     */
    'endTime': LocalTime;
    /**
     * Amount of people on the reservation
     * @type {number}
     * @memberof MakeReservationCommand
     */
    'numberOfPeople': number;
    /**
     * Client id responsible for reservation
     * @type {number}
     * @memberof MakeReservationCommand
     */
    'customerId'?: number;
}
/**
 * Model of a meal
 * @export
 * @interface Meal
 */
export interface Meal {
    /**
     * 
     * @type {number}
     * @memberof Meal
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Meal
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof Meal
     */
    'price'?: number;
    /**
     * 
     * @type {string}
     * @memberof Meal
     */
    'photographUrl'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Meal
     */
    'ingredients'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Meal
     */
    'removableIngredList'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Meal
     */
    'weightOrVolume'?: number;
    /**
     * 
     * @type {string}
     * @memberof Meal
     */
    'unitType'?: MealUnitTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof Meal
     */
    'categoryId': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Meal
     */
    'allergens'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Meal
     */
    'calories'?: number;
}

export const MealUnitTypeEnum = {
    Gramy: 'GRAMY',
    Mililitry: 'MILILITRY'
} as const;

export type MealUnitTypeEnum = typeof MealUnitTypeEnum[keyof typeof MealUnitTypeEnum];

/**
 * 
 * @export
 * @interface MealAddCommand
 */
export interface MealAddCommand {
    /**
     * Name of the meal
     * @type {string}
     * @memberof MealAddCommand
     */
    'name': string;
    /**
     * Price of the meal
     * @type {number}
     * @memberof MealAddCommand
     */
    'price'?: number;
    /**
     * URL to the photo of the meal
     * @type {string}
     * @memberof MealAddCommand
     */
    'photographUrl'?: string;
    /**
     * Ingredients used for the meal
     * @type {Array<string>}
     * @memberof MealAddCommand
     */
    'ingredients'?: Array<string>;
    /**
     * Ingredients that can be removed from the meal
     * @type {Array<string>}
     * @memberof MealAddCommand
     */
    'removableIngredientsList'?: Array<string>;
    /**
     * Weight or volume of the meal
     * @type {number}
     * @memberof MealAddCommand
     */
    'weightOrVolume'?: number;
    /**
     * Weight or volume
     * @type {string}
     * @memberof MealAddCommand
     */
    'unitType'?: MealAddCommandUnitTypeEnum;
    /**
     * Category of the meal
     * @type {number}
     * @memberof MealAddCommand
     */
    'categoryId': number;
    /**
     * Possible allergens for the meal
     * @type {Array<string>}
     * @memberof MealAddCommand
     */
    'allergens'?: Array<string>;
    /**
     * Calories for the meal in kcal
     * @type {number}
     * @memberof MealAddCommand
     */
    'calories'?: number;
}

export const MealAddCommandUnitTypeEnum = {
    Gramy: 'GRAMY',
    Mililitry: 'MILILITRY'
} as const;

export type MealAddCommandUnitTypeEnum = typeof MealAddCommandUnitTypeEnum[keyof typeof MealAddCommandUnitTypeEnum];

/**
 * 
 * @export
 * @interface MealQuantity
 */
export interface MealQuantity {
    /**
     * 
     * @type {number}
     * @memberof MealQuantity
     */
    'mealId'?: number;
    /**
     * 
     * @type {number}
     * @memberof MealQuantity
     */
    'quantity'?: number;
}
/**
 * 
 * @export
 * @interface OpeningHour
 */
export interface OpeningHour {
    /**
     * 
     * @type {number}
     * @memberof OpeningHour
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof OpeningHour
     */
    'day': OpeningHourDayEnum;
    /**
     * 
     * @type {LocalTime}
     * @memberof OpeningHour
     */
    'openingTime': LocalTime;
    /**
     * 
     * @type {LocalTime}
     * @memberof OpeningHour
     */
    'closingTime': LocalTime;
}

export const OpeningHourDayEnum = {
    Monday: 'MONDAY',
    Tuesday: 'TUESDAY',
    Wednesday: 'WEDNESDAY',
    Thursday: 'THURSDAY',
    Friday: 'FRIDAY',
    Saturday: 'SATURDAY',
    Sunday: 'SUNDAY'
} as const;

export type OpeningHourDayEnum = typeof OpeningHourDayEnum[keyof typeof OpeningHourDayEnum];

/**
 * 
 * @export
 * @interface OpinionAddCommand
 */
export interface OpinionAddCommand {
    /**
     * Id of the meal
     * @type {number}
     * @memberof OpinionAddCommand
     */
    'mealId': number;
    /**
     * Client id
     * @type {number}
     * @memberof OpinionAddCommand
     */
    'customerId': number;
    /**
     * Rating for the meal
     * @type {number}
     * @memberof OpinionAddCommand
     */
    'rating'?: number;
    /**
     * Comment for the opinion
     * @type {string}
     * @memberof OpinionAddCommand
     */
    'comment'?: string;
}
/**
 * 
 * @export
 * @interface OpinionResponseDTO
 */
export interface OpinionResponseDTO {
    /**
     * 
     * @type {number}
     * @memberof OpinionResponseDTO
     */
    'customerId'?: number;
    /**
     * 
     * @type {number}
     * @memberof OpinionResponseDTO
     */
    'rating'?: number;
    /**
     * 
     * @type {string}
     * @memberof OpinionResponseDTO
     */
    'comment'?: string;
}
/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'id'?: number;
    /**
     * 
     * @type {Array<MealQuantity>}
     * @memberof Order
     */
    'mealIds': Array<MealQuantity>;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'orderPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'customerId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'type': OrderTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'status': OrderStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'dateTime': string;
    /**
     * 
     * @type {Array<UnwantedIngredient>}
     * @memberof Order
     */
    'unwantedIngredients'?: Array<UnwantedIngredient>;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'paymentIntentClientSecret'?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'deliveryAddress'?: string;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'deliveryDistance'?: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'deliveryPrice'?: number;
    /**
     * 
     * @type {TableReservation}
     * @memberof Order
     */
    'tableReservation'?: TableReservation;
}

export const OrderTypeEnum = {
    Dostawa: 'DOSTAWA',
    NaMiejscu: 'NA_MIEJSCU',
    DoStolika: 'DO_STOLIKA'
} as const;

export type OrderTypeEnum = typeof OrderTypeEnum[keyof typeof OrderTypeEnum];
export const OrderStatusEnum = {
    Oczekujce: 'OCZEKUJĄCE',
    WTrakcieRealizacji: 'W_TRAKCIE_REALIZACJI',
    Gotowe: 'GOTOWE',
    WDostraczeniu: 'W_DOSTRACZENIU',
    Dostarczone: 'DOSTARCZONE',
    Odrzucone: 'ODRZUCONE'
} as const;

export type OrderStatusEnum = typeof OrderStatusEnum[keyof typeof OrderStatusEnum];

/**
 * 
 * @export
 * @interface OrderAddCommand
 */
export interface OrderAddCommand {
    /**
     * Quantities and ids of the meal
     * @type {Array<MealQuantity>}
     * @memberof OrderAddCommand
     */
    'mealIds': Array<MealQuantity>;
    /**
     * Client id for the order
     * @type {number}
     * @memberof OrderAddCommand
     */
    'customerId'?: number;
    /**
     * Type of the order
     * @type {string}
     * @memberof OrderAddCommand
     */
    'type': OrderAddCommandTypeEnum;
    /**
     * Status of the order
     * @type {string}
     * @memberof OrderAddCommand
     */
    'status': OrderAddCommandStatusEnum;
    /**
     * Unwanted ingredients in the order
     * @type {Array<UnwantedIngredient>}
     * @memberof OrderAddCommand
     */
    'unwantedIngredients'?: Array<UnwantedIngredient>;
    /**
     * Delivery address, empty if order is in restarurant
     * @type {string}
     * @memberof OrderAddCommand
     */
    'deliveryAddress'?: string;
    /**
     * Delivery distance, zero if it is not related
     * @type {number}
     * @memberof OrderAddCommand
     */
    'deliveryDistance'?: number;
    /**
     * If type DO_STOLIKA then add table id
     * @type {string}
     * @memberof OrderAddCommand
     */
    'tableId'?: string;
    /**
     * Number of people on the reservation
     * @type {number}
     * @memberof OrderAddCommand
     */
    'people'?: number;
    /**
     * Duration of the reservation in minutes
     * @type {number}
     * @memberof OrderAddCommand
     */
    'minutesForReservation'?: number;
    /**
     * Coupon id for the order. Empty if not used
     * @type {string}
     * @memberof OrderAddCommand
     */
    'couponCode'?: string;
}

export const OrderAddCommandTypeEnum = {
    Dostawa: 'DOSTAWA',
    NaMiejscu: 'NA_MIEJSCU',
    DoStolika: 'DO_STOLIKA'
} as const;

export type OrderAddCommandTypeEnum = typeof OrderAddCommandTypeEnum[keyof typeof OrderAddCommandTypeEnum];
export const OrderAddCommandStatusEnum = {
    Oczekujce: 'OCZEKUJĄCE',
    WTrakcieRealizacji: 'W_TRAKCIE_REALIZACJI',
    Gotowe: 'GOTOWE',
    WDostraczeniu: 'W_DOSTRACZENIU',
    Dostarczone: 'DOSTARCZONE',
    Odrzucone: 'ODRZUCONE'
} as const;

export type OrderAddCommandStatusEnum = typeof OrderAddCommandStatusEnum[keyof typeof OrderAddCommandStatusEnum];

/**
 * 
 * @export
 * @interface PossibleReservationHoursForDayDTO
 */
export interface PossibleReservationHoursForDayDTO {
    /**
     * 
     * @type {string}
     * @memberof PossibleReservationHoursForDayDTO
     */
    'date'?: string;
    /**
     * 
     * @type {Array<LocalTime>}
     * @memberof PossibleReservationHoursForDayDTO
     */
    'possibleStartTimes'?: Array<LocalTime>;
}
/**
 * 
 * @export
 * @interface Privilege
 */
export interface Privilege {
    /**
     * 
     * @type {number}
     * @memberof Privilege
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Privilege
     */
    'privilegeName': PrivilegePrivilegeNameEnum;
}

export const PrivilegePrivilegeNameEnum = {
    UserPrivilege: 'USER_PRIVILEGE',
    AdminPrivilege: 'ADMIN_PRIVILEGE'
} as const;

export type PrivilegePrivilegeNameEnum = typeof PrivilegePrivilegeNameEnum[keyof typeof PrivilegePrivilegeNameEnum];

/**
 * 
 * @export
 * @interface RegisterCustomerCommand
 */
export interface RegisterCustomerCommand {
    /**
     * 
     * @type {string}
     * @memberof RegisterCustomerCommand
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterCustomerCommand
     */
    'surname': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterCustomerCommand
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterCustomerCommand
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterCustomerCommand
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface RegisterResponseDTO
 */
export interface RegisterResponseDTO {
    /**
     * 
     * @type {number}
     * @memberof RegisterResponseDTO
     */
    'customerId'?: number;
    /**
     * 
     * @type {string}
     * @memberof RegisterResponseDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterResponseDTO
     */
    'surname'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterResponseDTO
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterResponseDTO
     */
    'phone'?: string;
}
/**
 * 
 * @export
 * @interface RegisterUserCommand
 */
export interface RegisterUserCommand {
    /**
     * 
     * @type {string}
     * @memberof RegisterUserCommand
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserCommand
     */
    'surname': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserCommand
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserCommand
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserCommand
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface Table
 */
export interface Table {
    /**
     * 
     * @type {string}
     * @memberof Table
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof Table
     */
    'capacity'?: number;
}
/**
 * 
 * @export
 * @interface TableAddCommand
 */
export interface TableAddCommand {
    /**
     * 
     * @type {string}
     * @memberof TableAddCommand
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof TableAddCommand
     */
    'capacity'?: number;
}
/**
 * 
 * @export
 * @interface TableReservation
 */
export interface TableReservation {
    /**
     * 
     * @type {number}
     * @memberof TableReservation
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TableReservation
     */
    'tableId'?: string;
    /**
     * 
     * @type {number}
     * @memberof TableReservation
     */
    'people': number;
    /**
     * 
     * @type {string}
     * @memberof TableReservation
     */
    'day': string;
    /**
     * 
     * @type {LocalTime}
     * @memberof TableReservation
     */
    'startTime': LocalTime;
    /**
     * 
     * @type {LocalTime}
     * @memberof TableReservation
     */
    'endTime': LocalTime;
    /**
     * 
     * @type {number}
     * @memberof TableReservation
     */
    'duration'?: number;
    /**
     * 
     * @type {number}
     * @memberof TableReservation
     */
    'customerId'?: number;
    /**
     * 
     * @type {Array<Order>}
     * @memberof TableReservation
     */
    'orders'?: Array<Order>;
}
/**
 * 
 * @export
 * @interface UnwantedIngredient
 */
export interface UnwantedIngredient {
    /**
     * 
     * @type {number}
     * @memberof UnwantedIngredient
     */
    'mealIndex'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnwantedIngredient
     */
    'ingredients'?: Array<string>;
}

/**
 * AuthControllerApi - axios parameter creator
 * @export
 */
export const AuthControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Initiate password reset process
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword: async (email: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('forgotPassword', 'email', email)
            const localVarPath = `/auth/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Log in
         * @param {LoginCommand} loginCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginCommand: LoginCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginCommand' is not null or undefined
            assertParamExists('login', 'loginCommand', loginCommand)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register a new user
         * @param {RegisterUserCommand} registerUserCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser: async (registerUserCommand: RegisterUserCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerUserCommand' is not null or undefined
            assertParamExists('registerUser', 'registerUserCommand', registerUserCommand)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerUserCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reset password
         * @param {string} token 
         * @param {string} newPassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword: async (token: string, newPassword: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('resetPassword', 'token', token)
            // verify required parameter 'newPassword' is not null or undefined
            assertParamExists('resetPassword', 'newPassword', newPassword)
            const localVarPath = `/auth/password-reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (newPassword !== undefined) {
                localVarQueryParameter['newPassword'] = newPassword;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Validate password reset token
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordForm: async (token: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('resetPasswordForm', 'token', token)
            const localVarPath = `/auth/password-reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthControllerApi - functional programming interface
 * @export
 */
export const AuthControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Initiate password reset process
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forgotPassword(email: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forgotPassword(email, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthControllerApi.forgotPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Log in
         * @param {LoginCommand} loginCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginCommand: LoginCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthControllerApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Register a new user
         * @param {RegisterUserCommand} registerUserCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerUser(registerUserCommand: RegisterUserCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerUser(registerUserCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthControllerApi.registerUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Reset password
         * @param {string} token 
         * @param {string} newPassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPassword(token: string, newPassword: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPassword(token, newPassword, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthControllerApi.resetPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Validate password reset token
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPasswordForm(token: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPasswordForm(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthControllerApi.resetPasswordForm']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthControllerApi - factory interface
 * @export
 */
export const AuthControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Initiate password reset process
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword(email: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.forgotPassword(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Log in
         * @param {LoginCommand} loginCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginCommand: LoginCommand, options?: RawAxiosRequestConfig): AxiosPromise<LoginResponseDTO> {
            return localVarFp.login(loginCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register a new user
         * @param {RegisterUserCommand} registerUserCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser(registerUserCommand: RegisterUserCommand, options?: RawAxiosRequestConfig): AxiosPromise<RegisterResponseDTO> {
            return localVarFp.registerUser(registerUserCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reset password
         * @param {string} token 
         * @param {string} newPassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(token: string, newPassword: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.resetPassword(token, newPassword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Validate password reset token
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordForm(token: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.resetPasswordForm(token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthControllerApi - object-oriented interface
 * @export
 * @class AuthControllerApi
 * @extends {BaseAPI}
 */
export class AuthControllerApi extends BaseAPI {
    /**
     * 
     * @summary Initiate password reset process
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public forgotPassword(email: string, options?: RawAxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).forgotPassword(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Log in
     * @param {LoginCommand} loginCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public login(loginCommand: LoginCommand, options?: RawAxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).login(loginCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register a new user
     * @param {RegisterUserCommand} registerUserCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public registerUser(registerUserCommand: RegisterUserCommand, options?: RawAxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).registerUser(registerUserCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reset password
     * @param {string} token 
     * @param {string} newPassword 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public resetPassword(token: string, newPassword: string, options?: RawAxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).resetPassword(token, newPassword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Validate password reset token
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public resetPasswordForm(token: string, options?: RawAxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).resetPasswordForm(token, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CategoryControllerApi - axios parameter creator
 * @export
 */
export const CategoryControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a category
         * @param {CategoryAddCommand} categoryAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCategory: async (categoryAddCommand: CategoryAddCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryAddCommand' is not null or undefined
            assertParamExists('addCategory', 'categoryAddCommand', categoryAddCommand)
            const localVarPath = `/api/categories/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryAddCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a category by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategoryById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCategoryById', 'id', id)
            const localVarPath = `/api/categories/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategories: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/categories/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get category by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCategoryById', 'id', id)
            const localVarPath = `/api/categories/get/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a category by id
         * @param {number} id 
         * @param {CategoryAddCommand} categoryAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory: async (id: number, categoryAddCommand: CategoryAddCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCategory', 'id', id)
            // verify required parameter 'categoryAddCommand' is not null or undefined
            assertParamExists('updateCategory', 'categoryAddCommand', categoryAddCommand)
            const localVarPath = `/api/categories/update/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryAddCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryControllerApi - functional programming interface
 * @export
 */
export const CategoryControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a category
         * @param {CategoryAddCommand} categoryAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCategory(categoryAddCommand: CategoryAddCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCategory(categoryAddCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryControllerApi.addCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a category by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategoryById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCategoryById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryControllerApi.deleteCategoryById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCategories(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Category>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCategories(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryControllerApi.getAllCategories']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get category by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategoryById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategoryById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryControllerApi.getCategoryById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a category by id
         * @param {number} id 
         * @param {CategoryAddCommand} categoryAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCategory(id: number, categoryAddCommand: CategoryAddCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCategory(id, categoryAddCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryControllerApi.updateCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CategoryControllerApi - factory interface
 * @export
 */
export const CategoryControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a category
         * @param {CategoryAddCommand} categoryAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCategory(categoryAddCommand: CategoryAddCommand, options?: RawAxiosRequestConfig): AxiosPromise<Category> {
            return localVarFp.addCategory(categoryAddCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a category by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategoryById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.deleteCategoryById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategories(options?: RawAxiosRequestConfig): AxiosPromise<Array<Category>> {
            return localVarFp.getAllCategories(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get category by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Category> {
            return localVarFp.getCategoryById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a category by id
         * @param {number} id 
         * @param {CategoryAddCommand} categoryAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory(id: number, categoryAddCommand: CategoryAddCommand, options?: RawAxiosRequestConfig): AxiosPromise<Category> {
            return localVarFp.updateCategory(id, categoryAddCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoryControllerApi - object-oriented interface
 * @export
 * @class CategoryControllerApi
 * @extends {BaseAPI}
 */
export class CategoryControllerApi extends BaseAPI {
    /**
     * 
     * @summary Add a category
     * @param {CategoryAddCommand} categoryAddCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public addCategory(categoryAddCommand: CategoryAddCommand, options?: RawAxiosRequestConfig) {
        return CategoryControllerApiFp(this.configuration).addCategory(categoryAddCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a category by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public deleteCategoryById(id: number, options?: RawAxiosRequestConfig) {
        return CategoryControllerApiFp(this.configuration).deleteCategoryById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public getAllCategories(options?: RawAxiosRequestConfig) {
        return CategoryControllerApiFp(this.configuration).getAllCategories(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get category by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public getCategoryById(id: number, options?: RawAxiosRequestConfig) {
        return CategoryControllerApiFp(this.configuration).getCategoryById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a category by id
     * @param {number} id 
     * @param {CategoryAddCommand} categoryAddCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public updateCategory(id: number, categoryAddCommand: CategoryAddCommand, options?: RawAxiosRequestConfig) {
        return CategoryControllerApiFp(this.configuration).updateCategory(id, categoryAddCommand, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ConfigControllerApi - axios parameter creator
 * @export
 */
export const ConfigControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get system configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfig: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/api/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get delivery prices configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeliveryPrices: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/api/config/delivery-prices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get opening hours configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpeningHours: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/api/config/opening-hours`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Initialize the system with configuration
         * @param {ConfigAddCommand} configAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initializeSystem: async (configAddCommand: ConfigAddCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configAddCommand' is not null or undefined
            assertParamExists('initializeSystem', 'configAddCommand', configAddCommand)
            const localVarPath = `/admin/api/config/initialize-system`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(configAddCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove all configurations including delivery prices and opening hours (testing purposes only)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeConfigs: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/api/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigControllerApi - functional programming interface
 * @export
 */
export const ConfigControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConfigControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get system configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConfig(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Config>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConfig(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigControllerApi.getConfig']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get delivery prices configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeliveryPrices(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryPricing>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeliveryPrices(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigControllerApi.getDeliveryPrices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get opening hours configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOpeningHours(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OpeningHour>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOpeningHours(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigControllerApi.getOpeningHours']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Initialize the system with configuration
         * @param {ConfigAddCommand} configAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initializeSystem(configAddCommand: ConfigAddCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.initializeSystem(configAddCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigControllerApi.initializeSystem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove all configurations including delivery prices and opening hours (testing purposes only)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeConfigs(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeConfigs(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigControllerApi.removeConfigs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ConfigControllerApi - factory interface
 * @export
 */
export const ConfigControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConfigControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Get system configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfig(options?: RawAxiosRequestConfig): AxiosPromise<Config> {
            return localVarFp.getConfig(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get delivery prices configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeliveryPrices(options?: RawAxiosRequestConfig): AxiosPromise<DeliveryPricing> {
            return localVarFp.getDeliveryPrices(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get opening hours configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpeningHours(options?: RawAxiosRequestConfig): AxiosPromise<OpeningHour> {
            return localVarFp.getOpeningHours(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Initialize the system with configuration
         * @param {ConfigAddCommand} configAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initializeSystem(configAddCommand: ConfigAddCommand, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.initializeSystem(configAddCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove all configurations including delivery prices and opening hours (testing purposes only)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeConfigs(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeConfigs(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConfigControllerApi - object-oriented interface
 * @export
 * @class ConfigControllerApi
 * @extends {BaseAPI}
 */
export class ConfigControllerApi extends BaseAPI {
    /**
     * 
     * @summary Get system configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigControllerApi
     */
    public getConfig(options?: RawAxiosRequestConfig) {
        return ConfigControllerApiFp(this.configuration).getConfig(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get delivery prices configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigControllerApi
     */
    public getDeliveryPrices(options?: RawAxiosRequestConfig) {
        return ConfigControllerApiFp(this.configuration).getDeliveryPrices(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get opening hours configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigControllerApi
     */
    public getOpeningHours(options?: RawAxiosRequestConfig) {
        return ConfigControllerApiFp(this.configuration).getOpeningHours(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Initialize the system with configuration
     * @param {ConfigAddCommand} configAddCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigControllerApi
     */
    public initializeSystem(configAddCommand: ConfigAddCommand, options?: RawAxiosRequestConfig) {
        return ConfigControllerApiFp(this.configuration).initializeSystem(configAddCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove all configurations including delivery prices and opening hours (testing purposes only)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigControllerApi
     */
    public removeConfigs(options?: RawAxiosRequestConfig) {
        return ConfigControllerApiFp(this.configuration).removeConfigs(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ContactFormControllerApi - axios parameter creator
 * @export
 */
export const ContactFormControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Send contact email
         * @param {ContactFormCommand} contactFormCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendContactForm: async (contactFormCommand: ContactFormCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactFormCommand' is not null or undefined
            assertParamExists('sendContactForm', 'contactFormCommand', contactFormCommand)
            const localVarPath = `/api/contact-form/send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contactFormCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactFormControllerApi - functional programming interface
 * @export
 */
export const ContactFormControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContactFormControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Send contact email
         * @param {ContactFormCommand} contactFormCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendContactForm(contactFormCommand: ContactFormCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendContactForm(contactFormCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactFormControllerApi.sendContactForm']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ContactFormControllerApi - factory interface
 * @export
 */
export const ContactFormControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContactFormControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Send contact email
         * @param {ContactFormCommand} contactFormCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendContactForm(contactFormCommand: ContactFormCommand, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.sendContactForm(contactFormCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContactFormControllerApi - object-oriented interface
 * @export
 * @class ContactFormControllerApi
 * @extends {BaseAPI}
 */
export class ContactFormControllerApi extends BaseAPI {
    /**
     * 
     * @summary Send contact email
     * @param {ContactFormCommand} contactFormCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactFormControllerApi
     */
    public sendContactForm(contactFormCommand: ContactFormCommand, options?: RawAxiosRequestConfig) {
        return ContactFormControllerApiFp(this.configuration).sendContactForm(contactFormCommand, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CouponControllerApi - axios parameter creator
 * @export
 */
export const CouponControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Apply coupon
         * @param {string} code 
         * @param {number} customerId 
         * @param {number} mealId 
         * @param {number} originalPrice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyCoupon: async (code: string, customerId: number, mealId: number, originalPrice: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('applyCoupon', 'code', code)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('applyCoupon', 'customerId', customerId)
            // verify required parameter 'mealId' is not null or undefined
            assertParamExists('applyCoupon', 'mealId', mealId)
            // verify required parameter 'originalPrice' is not null or undefined
            assertParamExists('applyCoupon', 'originalPrice', originalPrice)
            const localVarPath = `/api/coupons/apply`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }

            if (mealId !== undefined) {
                localVarQueryParameter['mealId'] = mealId;
            }

            if (originalPrice !== undefined) {
                localVarQueryParameter['originalPrice'] = originalPrice;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create coupon
         * @param {CouponAddCommand} couponAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCoupon: async (couponAddCommand: CouponAddCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'couponAddCommand' is not null or undefined
            assertParamExists('createCoupon', 'couponAddCommand', couponAddCommand)
            const localVarPath = `/api/coupons/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(couponAddCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deactivate coupon
         * @param {number} couponId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deactivateCoupon: async (couponId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'couponId' is not null or undefined
            assertParamExists('deactivateCoupon', 'couponId', couponId)
            const localVarPath = `/api/coupons/deactivate/{couponId}`
                .replace(`{${"couponId"}}`, encodeURIComponent(String(couponId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all coupons for a customer
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponsForCustomer: async (customerId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getCouponsForCustomer', 'customerId', customerId)
            const localVarPath = `/api/coupons/customer/{customerId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all coupons for a meal
         * @param {number} mealId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponsForMeal: async (mealId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mealId' is not null or undefined
            assertParamExists('getCouponsForMeal', 'mealId', mealId)
            const localVarPath = `/api/coupons/meal/{mealId}`
                .replace(`{${"mealId"}}`, encodeURIComponent(String(mealId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Validate coupon
         * @param {string} code 
         * @param {number} customerId 
         * @param {number} mealId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateCoupon: async (code: string, customerId: number, mealId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('validateCoupon', 'code', code)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('validateCoupon', 'customerId', customerId)
            // verify required parameter 'mealId' is not null or undefined
            assertParamExists('validateCoupon', 'mealId', mealId)
            const localVarPath = `/api/coupons/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }

            if (mealId !== undefined) {
                localVarQueryParameter['mealId'] = mealId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CouponControllerApi - functional programming interface
 * @export
 */
export const CouponControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CouponControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Apply coupon
         * @param {string} code 
         * @param {number} customerId 
         * @param {number} mealId 
         * @param {number} originalPrice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applyCoupon(code: string, customerId: number, mealId: number, originalPrice: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applyCoupon(code, customerId, mealId, originalPrice, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CouponControllerApi.applyCoupon']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create coupon
         * @param {CouponAddCommand} couponAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCoupon(couponAddCommand: CouponAddCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Coupon>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCoupon(couponAddCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CouponControllerApi.createCoupon']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deactivate coupon
         * @param {number} couponId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deactivateCoupon(couponId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deactivateCoupon(couponId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CouponControllerApi.deactivateCoupon']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all coupons for a customer
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCouponsForCustomer(customerId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Coupon>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCouponsForCustomer(customerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CouponControllerApi.getCouponsForCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all coupons for a meal
         * @param {number} mealId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCouponsForMeal(mealId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Coupon>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCouponsForMeal(mealId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CouponControllerApi.getCouponsForMeal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Validate coupon
         * @param {string} code 
         * @param {number} customerId 
         * @param {number} mealId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateCoupon(code: string, customerId: number, mealId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateCoupon(code, customerId, mealId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CouponControllerApi.validateCoupon']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CouponControllerApi - factory interface
 * @export
 */
export const CouponControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CouponControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Apply coupon
         * @param {string} code 
         * @param {number} customerId 
         * @param {number} mealId 
         * @param {number} originalPrice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyCoupon(code: string, customerId: number, mealId: number, originalPrice: number, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.applyCoupon(code, customerId, mealId, originalPrice, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create coupon
         * @param {CouponAddCommand} couponAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCoupon(couponAddCommand: CouponAddCommand, options?: RawAxiosRequestConfig): AxiosPromise<Coupon> {
            return localVarFp.createCoupon(couponAddCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deactivate coupon
         * @param {number} couponId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deactivateCoupon(couponId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deactivateCoupon(couponId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all coupons for a customer
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponsForCustomer(customerId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Coupon>> {
            return localVarFp.getCouponsForCustomer(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all coupons for a meal
         * @param {number} mealId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponsForMeal(mealId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Coupon>> {
            return localVarFp.getCouponsForMeal(mealId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Validate coupon
         * @param {string} code 
         * @param {number} customerId 
         * @param {number} mealId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateCoupon(code: string, customerId: number, mealId: number, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.validateCoupon(code, customerId, mealId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CouponControllerApi - object-oriented interface
 * @export
 * @class CouponControllerApi
 * @extends {BaseAPI}
 */
export class CouponControllerApi extends BaseAPI {
    /**
     * 
     * @summary Apply coupon
     * @param {string} code 
     * @param {number} customerId 
     * @param {number} mealId 
     * @param {number} originalPrice 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponControllerApi
     */
    public applyCoupon(code: string, customerId: number, mealId: number, originalPrice: number, options?: RawAxiosRequestConfig) {
        return CouponControllerApiFp(this.configuration).applyCoupon(code, customerId, mealId, originalPrice, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create coupon
     * @param {CouponAddCommand} couponAddCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponControllerApi
     */
    public createCoupon(couponAddCommand: CouponAddCommand, options?: RawAxiosRequestConfig) {
        return CouponControllerApiFp(this.configuration).createCoupon(couponAddCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deactivate coupon
     * @param {number} couponId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponControllerApi
     */
    public deactivateCoupon(couponId: number, options?: RawAxiosRequestConfig) {
        return CouponControllerApiFp(this.configuration).deactivateCoupon(couponId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all coupons for a customer
     * @param {number} customerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponControllerApi
     */
    public getCouponsForCustomer(customerId: number, options?: RawAxiosRequestConfig) {
        return CouponControllerApiFp(this.configuration).getCouponsForCustomer(customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all coupons for a meal
     * @param {number} mealId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponControllerApi
     */
    public getCouponsForMeal(mealId: number, options?: RawAxiosRequestConfig) {
        return CouponControllerApiFp(this.configuration).getCouponsForMeal(mealId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Validate coupon
     * @param {string} code 
     * @param {number} customerId 
     * @param {number} mealId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponControllerApi
     */
    public validateCoupon(code: string, customerId: number, mealId: number, options?: RawAxiosRequestConfig) {
        return CouponControllerApiFp(this.configuration).validateCoupon(code, customerId, mealId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CustomerControllerApi - axios parameter creator
 * @export
 */
export const CustomerControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete customer by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomerById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCustomerById', 'id', id)
            const localVarPath = `/api/customer/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all customers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCustomers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/customer/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get customer by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCustomerById', 'id', id)
            const localVarPath = `/api/customer/get/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register new customer (non admin)
         * @param {RegisterCustomerCommand} registerCustomerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerCustomer: async (registerCustomerCommand: RegisterCustomerCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerCustomerCommand' is not null or undefined
            assertParamExists('registerCustomer', 'registerCustomerCommand', registerCustomerCommand)
            const localVarPath = `/api/customer/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerCustomerCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update customer (non admin)
         * @param {number} id 
         * @param {RegisterCustomerCommand} registerCustomerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomer: async (id: number, registerCustomerCommand: RegisterCustomerCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCustomer', 'id', id)
            // verify required parameter 'registerCustomerCommand' is not null or undefined
            assertParamExists('updateCustomer', 'registerCustomerCommand', registerCustomerCommand)
            const localVarPath = `/api/customer/update/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerCustomerCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerControllerApi - functional programming interface
 * @export
 */
export const CustomerControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete customer by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustomerById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustomerById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerControllerApi.deleteCustomerById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all customers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCustomers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCustomers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerControllerApi.getAllCustomers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get customer by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerControllerApi.getCustomerById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Register new customer (non admin)
         * @param {RegisterCustomerCommand} registerCustomerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerCustomer(registerCustomerCommand: RegisterCustomerCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerCustomer(registerCustomerCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerControllerApi.registerCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update customer (non admin)
         * @param {number} id 
         * @param {RegisterCustomerCommand} registerCustomerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCustomer(id: number, registerCustomerCommand: RegisterCustomerCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCustomer(id, registerCustomerCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerControllerApi.updateCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerControllerApi - factory interface
 * @export
 */
export const CustomerControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete customer by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomerById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteCustomerById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all customers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCustomers(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getAllCustomers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get customer by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Customer> {
            return localVarFp.getCustomerById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register new customer (non admin)
         * @param {RegisterCustomerCommand} registerCustomerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerCustomer(registerCustomerCommand: RegisterCustomerCommand, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.registerCustomer(registerCustomerCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update customer (non admin)
         * @param {number} id 
         * @param {RegisterCustomerCommand} registerCustomerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomer(id: number, registerCustomerCommand: RegisterCustomerCommand, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateCustomer(id, registerCustomerCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerControllerApi - object-oriented interface
 * @export
 * @class CustomerControllerApi
 * @extends {BaseAPI}
 */
export class CustomerControllerApi extends BaseAPI {
    /**
     * 
     * @summary Delete customer by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerControllerApi
     */
    public deleteCustomerById(id: number, options?: RawAxiosRequestConfig) {
        return CustomerControllerApiFp(this.configuration).deleteCustomerById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all customers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerControllerApi
     */
    public getAllCustomers(options?: RawAxiosRequestConfig) {
        return CustomerControllerApiFp(this.configuration).getAllCustomers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get customer by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerControllerApi
     */
    public getCustomerById(id: number, options?: RawAxiosRequestConfig) {
        return CustomerControllerApiFp(this.configuration).getCustomerById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register new customer (non admin)
     * @param {RegisterCustomerCommand} registerCustomerCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerControllerApi
     */
    public registerCustomer(registerCustomerCommand: RegisterCustomerCommand, options?: RawAxiosRequestConfig) {
        return CustomerControllerApiFp(this.configuration).registerCustomer(registerCustomerCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update customer (non admin)
     * @param {number} id 
     * @param {RegisterCustomerCommand} registerCustomerCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerControllerApi
     */
    public updateCustomer(id: number, registerCustomerCommand: RegisterCustomerCommand, options?: RawAxiosRequestConfig) {
        return CustomerControllerApiFp(this.configuration).updateCustomer(id, registerCustomerCommand, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MealControllerApi - axios parameter creator
 * @export
 */
export const MealControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a meal
         * @param {MealAddCommand} mealAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMeal: async (mealAddCommand: MealAddCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mealAddCommand' is not null or undefined
            assertParamExists('addMeal', 'mealAddCommand', mealAddCommand)
            const localVarPath = `/api/meals/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mealAddCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete all meals with a given category id
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllMealsByCategory: async (categoryId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('deleteAllMealsByCategory', 'categoryId', categoryId)
            const localVarPath = `/api/meals/delete-meals/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a meal by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMealById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteMealById', 'id', id)
            const localVarPath = `/api/meals/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all meals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMeals: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/meals/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get meal by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMealById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMealById', 'id', id)
            const localVarPath = `/api/meals/get/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all meals with a given category id
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMealsByCategory: async (categoryId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('getMealsByCategory', 'categoryId', categoryId)
            const localVarPath = `/api/meals/get-meals/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search meals by name
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMealsByName: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('searchMealsByName', 'name', name)
            const localVarPath = `/api/meals/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a meal by id
         * @param {number} id 
         * @param {MealAddCommand} mealAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMeal: async (id: number, mealAddCommand: MealAddCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateMeal', 'id', id)
            // verify required parameter 'mealAddCommand' is not null or undefined
            assertParamExists('updateMeal', 'mealAddCommand', mealAddCommand)
            const localVarPath = `/api/meals/update/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mealAddCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MealControllerApi - functional programming interface
 * @export
 */
export const MealControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MealControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a meal
         * @param {MealAddCommand} mealAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMeal(mealAddCommand: MealAddCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Meal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMeal(mealAddCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MealControllerApi.addMeal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete all meals with a given category id
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllMealsByCategory(categoryId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAllMealsByCategory(categoryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MealControllerApi.deleteAllMealsByCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a meal by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMealById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMealById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MealControllerApi.deleteMealById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all meals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllMeals(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Meal>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMeals(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MealControllerApi.getAllMeals']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get meal by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMealById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Meal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMealById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MealControllerApi.getMealById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all meals with a given category id
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMealsByCategory(categoryId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Meal>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMealsByCategory(categoryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MealControllerApi.getMealsByCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Search meals by name
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchMealsByName(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchMealsByName(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MealControllerApi.searchMealsByName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a meal by id
         * @param {number} id 
         * @param {MealAddCommand} mealAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMeal(id: number, mealAddCommand: MealAddCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Meal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMeal(id, mealAddCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MealControllerApi.updateMeal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MealControllerApi - factory interface
 * @export
 */
export const MealControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MealControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a meal
         * @param {MealAddCommand} mealAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMeal(mealAddCommand: MealAddCommand, options?: RawAxiosRequestConfig): AxiosPromise<Meal> {
            return localVarFp.addMeal(mealAddCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete all meals with a given category id
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllMealsByCategory(categoryId: number, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.deleteAllMealsByCategory(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a meal by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMealById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.deleteMealById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all meals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMeals(options?: RawAxiosRequestConfig): AxiosPromise<Array<Meal>> {
            return localVarFp.getAllMeals(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get meal by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMealById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Meal> {
            return localVarFp.getMealById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all meals with a given category id
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMealsByCategory(categoryId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Meal>> {
            return localVarFp.getMealsByCategory(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search meals by name
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMealsByName(name: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.searchMealsByName(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a meal by id
         * @param {number} id 
         * @param {MealAddCommand} mealAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMeal(id: number, mealAddCommand: MealAddCommand, options?: RawAxiosRequestConfig): AxiosPromise<Meal> {
            return localVarFp.updateMeal(id, mealAddCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MealControllerApi - object-oriented interface
 * @export
 * @class MealControllerApi
 * @extends {BaseAPI}
 */
export class MealControllerApi extends BaseAPI {
    /**
     * 
     * @summary Add a meal
     * @param {MealAddCommand} mealAddCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealControllerApi
     */
    public addMeal(mealAddCommand: MealAddCommand, options?: RawAxiosRequestConfig) {
        return MealControllerApiFp(this.configuration).addMeal(mealAddCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete all meals with a given category id
     * @param {number} categoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealControllerApi
     */
    public deleteAllMealsByCategory(categoryId: number, options?: RawAxiosRequestConfig) {
        return MealControllerApiFp(this.configuration).deleteAllMealsByCategory(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a meal by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealControllerApi
     */
    public deleteMealById(id: number, options?: RawAxiosRequestConfig) {
        return MealControllerApiFp(this.configuration).deleteMealById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all meals
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealControllerApi
     */
    public getAllMeals(options?: RawAxiosRequestConfig) {
        return MealControllerApiFp(this.configuration).getAllMeals(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get meal by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealControllerApi
     */
    public getMealById(id: number, options?: RawAxiosRequestConfig) {
        return MealControllerApiFp(this.configuration).getMealById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all meals with a given category id
     * @param {number} categoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealControllerApi
     */
    public getMealsByCategory(categoryId: number, options?: RawAxiosRequestConfig) {
        return MealControllerApiFp(this.configuration).getMealsByCategory(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search meals by name
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealControllerApi
     */
    public searchMealsByName(name: string, options?: RawAxiosRequestConfig) {
        return MealControllerApiFp(this.configuration).searchMealsByName(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a meal by id
     * @param {number} id 
     * @param {MealAddCommand} mealAddCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealControllerApi
     */
    public updateMeal(id: number, mealAddCommand: MealAddCommand, options?: RawAxiosRequestConfig) {
        return MealControllerApiFp(this.configuration).updateMeal(id, mealAddCommand, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OpinionControllerApi - axios parameter creator
 * @export
 */
export const OpinionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add opinion
         * @param {OpinionAddCommand} opinionAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOpinion: async (opinionAddCommand: OpinionAddCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'opinionAddCommand' is not null or undefined
            assertParamExists('addOpinion', 'opinionAddCommand', opinionAddCommand)
            const localVarPath = `/api/opinions/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(opinionAddCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get average rating for meal
         * @param {number} mealId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAverageRating: async (mealId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mealId' is not null or undefined
            assertParamExists('getAverageRating', 'mealId', mealId)
            const localVarPath = `/api/opinions/average-rating/{mealId}`
                .replace(`{${"mealId"}}`, encodeURIComponent(String(mealId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get opinions for customer
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpinionsForCustomer: async (customerId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getOpinionsForCustomer', 'customerId', customerId)
            const localVarPath = `/api/opinions/customer/{customerId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get opinions for meal
         * @param {number} mealId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpinionsForMeal: async (mealId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mealId' is not null or undefined
            assertParamExists('getOpinionsForMeal', 'mealId', mealId)
            const localVarPath = `/api/opinions/meal/{mealId}`
                .replace(`{${"mealId"}}`, encodeURIComponent(String(mealId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update opinion for customer
         * @param {OpinionAddCommand} opinionAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOpinion: async (opinionAddCommand: OpinionAddCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'opinionAddCommand' is not null or undefined
            assertParamExists('updateOpinion', 'opinionAddCommand', opinionAddCommand)
            const localVarPath = `/api/opinions/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(opinionAddCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OpinionControllerApi - functional programming interface
 * @export
 */
export const OpinionControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OpinionControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add opinion
         * @param {OpinionAddCommand} opinionAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addOpinion(opinionAddCommand: OpinionAddCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OpinionResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOpinion(opinionAddCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpinionControllerApi.addOpinion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get average rating for meal
         * @param {number} mealId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAverageRating(mealId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AverageRatingResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAverageRating(mealId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpinionControllerApi.getAverageRating']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get opinions for customer
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOpinionsForCustomer(customerId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OpinionResponseDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOpinionsForCustomer(customerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpinionControllerApi.getOpinionsForCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get opinions for meal
         * @param {number} mealId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOpinionsForMeal(mealId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OpinionResponseDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOpinionsForMeal(mealId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpinionControllerApi.getOpinionsForMeal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update opinion for customer
         * @param {OpinionAddCommand} opinionAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOpinion(opinionAddCommand: OpinionAddCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OpinionResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOpinion(opinionAddCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpinionControllerApi.updateOpinion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OpinionControllerApi - factory interface
 * @export
 */
export const OpinionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OpinionControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Add opinion
         * @param {OpinionAddCommand} opinionAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOpinion(opinionAddCommand: OpinionAddCommand, options?: RawAxiosRequestConfig): AxiosPromise<OpinionResponseDTO> {
            return localVarFp.addOpinion(opinionAddCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get average rating for meal
         * @param {number} mealId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAverageRating(mealId: number, options?: RawAxiosRequestConfig): AxiosPromise<AverageRatingResponseDTO> {
            return localVarFp.getAverageRating(mealId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get opinions for customer
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpinionsForCustomer(customerId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<OpinionResponseDTO>> {
            return localVarFp.getOpinionsForCustomer(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get opinions for meal
         * @param {number} mealId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpinionsForMeal(mealId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<OpinionResponseDTO>> {
            return localVarFp.getOpinionsForMeal(mealId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update opinion for customer
         * @param {OpinionAddCommand} opinionAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOpinion(opinionAddCommand: OpinionAddCommand, options?: RawAxiosRequestConfig): AxiosPromise<OpinionResponseDTO> {
            return localVarFp.updateOpinion(opinionAddCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OpinionControllerApi - object-oriented interface
 * @export
 * @class OpinionControllerApi
 * @extends {BaseAPI}
 */
export class OpinionControllerApi extends BaseAPI {
    /**
     * 
     * @summary Add opinion
     * @param {OpinionAddCommand} opinionAddCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpinionControllerApi
     */
    public addOpinion(opinionAddCommand: OpinionAddCommand, options?: RawAxiosRequestConfig) {
        return OpinionControllerApiFp(this.configuration).addOpinion(opinionAddCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get average rating for meal
     * @param {number} mealId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpinionControllerApi
     */
    public getAverageRating(mealId: number, options?: RawAxiosRequestConfig) {
        return OpinionControllerApiFp(this.configuration).getAverageRating(mealId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get opinions for customer
     * @param {number} customerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpinionControllerApi
     */
    public getOpinionsForCustomer(customerId: number, options?: RawAxiosRequestConfig) {
        return OpinionControllerApiFp(this.configuration).getOpinionsForCustomer(customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get opinions for meal
     * @param {number} mealId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpinionControllerApi
     */
    public getOpinionsForMeal(mealId: number, options?: RawAxiosRequestConfig) {
        return OpinionControllerApiFp(this.configuration).getOpinionsForMeal(mealId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update opinion for customer
     * @param {OpinionAddCommand} opinionAddCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpinionControllerApi
     */
    public updateOpinion(opinionAddCommand: OpinionAddCommand, options?: RawAxiosRequestConfig) {
        return OpinionControllerApiFp(this.configuration).updateOpinion(opinionAddCommand, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrderControllerApi - axios parameter creator
 * @export
 */
export const OrderControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add new order
         * @param {OrderAddCommand} orderAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrder: async (orderAddCommand: OrderAddCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderAddCommand' is not null or undefined
            assertParamExists('addOrder', 'orderAddCommand', orderAddCommand)
            const localVarPath = `/api/orders/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderAddCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add order to reservation
         * @param {number} reservationId 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrderToReservation: async (reservationId: number, orderId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reservationId' is not null or undefined
            assertParamExists('addOrderToReservation', 'reservationId', reservationId)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('addOrderToReservation', 'orderId', orderId)
            const localVarPath = `/api/orders/add-to-reservation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (reservationId !== undefined) {
                localVarQueryParameter['reservationId'] = reservationId;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete order
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOrder', 'id', id)
            const localVarPath = `/api/orders/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrders: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/orders/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all orders of a customer
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrdersOfCustomer: async (customerId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getAllOrdersOfCustomer', 'customerId', customerId)
            const localVarPath = `/api/orders/get/customer/{customerId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get order by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrderById', 'id', id)
            const localVarPath = `/api/orders/get/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update order
         * @param {number} id 
         * @param {OrderAddCommand} orderAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder: async (id: number, orderAddCommand: OrderAddCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateOrder', 'id', id)
            // verify required parameter 'orderAddCommand' is not null or undefined
            assertParamExists('updateOrder', 'orderAddCommand', orderAddCommand)
            const localVarPath = `/api/orders/update/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderAddCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderControllerApi - functional programming interface
 * @export
 */
export const OrderControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add new order
         * @param {OrderAddCommand} orderAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addOrder(orderAddCommand: OrderAddCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOrder(orderAddCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderControllerApi.addOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add order to reservation
         * @param {number} reservationId 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addOrderToReservation(reservationId: number, orderId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOrderToReservation(reservationId, orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderControllerApi.addOrderToReservation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete order
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrder(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrder(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderControllerApi.deleteOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllOrders(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllOrders(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderControllerApi.getAllOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all orders of a customer
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllOrdersOfCustomer(customerId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllOrdersOfCustomer(customerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderControllerApi.getAllOrdersOfCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get order by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderControllerApi.getOrderById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update order
         * @param {number} id 
         * @param {OrderAddCommand} orderAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrder(id: number, orderAddCommand: OrderAddCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrder(id, orderAddCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderControllerApi.updateOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrderControllerApi - factory interface
 * @export
 */
export const OrderControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Add new order
         * @param {OrderAddCommand} orderAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrder(orderAddCommand: OrderAddCommand, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.addOrder(orderAddCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add order to reservation
         * @param {number} reservationId 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrderToReservation(reservationId: number, orderId: number, options?: RawAxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.addOrderToReservation(reservationId, orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete order
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder(id: number, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.deleteOrder(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrders(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getAllOrders(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all orders of a customer
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrdersOfCustomer(customerId: number, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getAllOrdersOfCustomer(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get order by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.getOrderById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update order
         * @param {number} id 
         * @param {OrderAddCommand} orderAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder(id: number, orderAddCommand: OrderAddCommand, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateOrder(id, orderAddCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderControllerApi - object-oriented interface
 * @export
 * @class OrderControllerApi
 * @extends {BaseAPI}
 */
export class OrderControllerApi extends BaseAPI {
    /**
     * 
     * @summary Add new order
     * @param {OrderAddCommand} orderAddCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    public addOrder(orderAddCommand: OrderAddCommand, options?: RawAxiosRequestConfig) {
        return OrderControllerApiFp(this.configuration).addOrder(orderAddCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add order to reservation
     * @param {number} reservationId 
     * @param {number} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    public addOrderToReservation(reservationId: number, orderId: number, options?: RawAxiosRequestConfig) {
        return OrderControllerApiFp(this.configuration).addOrderToReservation(reservationId, orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete order
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    public deleteOrder(id: number, options?: RawAxiosRequestConfig) {
        return OrderControllerApiFp(this.configuration).deleteOrder(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all orders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    public getAllOrders(options?: RawAxiosRequestConfig) {
        return OrderControllerApiFp(this.configuration).getAllOrders(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all orders of a customer
     * @param {number} customerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    public getAllOrdersOfCustomer(customerId: number, options?: RawAxiosRequestConfig) {
        return OrderControllerApiFp(this.configuration).getAllOrdersOfCustomer(customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get order by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    public getOrderById(id: number, options?: RawAxiosRequestConfig) {
        return OrderControllerApiFp(this.configuration).getOrderById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update order
     * @param {number} id 
     * @param {OrderAddCommand} orderAddCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    public updateOrder(id: number, orderAddCommand: OrderAddCommand, options?: RawAxiosRequestConfig) {
        return OrderControllerApiFp(this.configuration).updateOrder(id, orderAddCommand, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PhotoControllerApi - axios parameter creator
 * @export
 */
export const PhotoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Download a photo from the server
         * @summary Download a photo
         * @param {string} filename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadPhoto: async (filename: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filename' is not null or undefined
            assertParamExists('downloadPhoto', 'filename', filename)
            const localVarPath = `/api/photos/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filename !== undefined) {
                localVarQueryParameter['filename'] = filename;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Uploads an image file
         * @summary Upload a file
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPhoto: async (file?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/photos/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PhotoControllerApi - functional programming interface
 * @export
 */
export const PhotoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PhotoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * Download a photo from the server
         * @summary Download a photo
         * @param {string} filename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadPhoto(filename: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadPhoto(filename, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhotoControllerApi.downloadPhoto']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Uploads an image file
         * @summary Upload a file
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadPhoto(file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadPhoto(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhotoControllerApi.uploadPhoto']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PhotoControllerApi - factory interface
 * @export
 */
export const PhotoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PhotoControllerApiFp(configuration)
    return {
        /**
         * Download a photo from the server
         * @summary Download a photo
         * @param {string} filename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadPhoto(filename: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.downloadPhoto(filename, options).then((request) => request(axios, basePath));
        },
        /**
         * Uploads an image file
         * @summary Upload a file
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPhoto(file?: File, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.uploadPhoto(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PhotoControllerApi - object-oriented interface
 * @export
 * @class PhotoControllerApi
 * @extends {BaseAPI}
 */
export class PhotoControllerApi extends BaseAPI {
    /**
     * Download a photo from the server
     * @summary Download a photo
     * @param {string} filename 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoControllerApi
     */
    public downloadPhoto(filename: string, options?: RawAxiosRequestConfig) {
        return PhotoControllerApiFp(this.configuration).downloadPhoto(filename, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Uploads an image file
     * @summary Upload a file
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoControllerApi
     */
    public uploadPhoto(file?: File, options?: RawAxiosRequestConfig) {
        return PhotoControllerApiFp(this.configuration).uploadPhoto(file, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * QrCodeControllerApi - axios parameter creator
 * @export
 */
export const QrCodeControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generates a QR code for a table
         * @summary Get QR code for table
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQRCodeForOrder: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getQRCodeForOrder', 'id', id)
            const localVarPath = `/api/qr/table/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QrCodeControllerApi - functional programming interface
 * @export
 */
export const QrCodeControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QrCodeControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * Generates a QR code for a table
         * @summary Get QR code for table
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQRCodeForOrder(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQRCodeForOrder(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QrCodeControllerApi.getQRCodeForOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * QrCodeControllerApi - factory interface
 * @export
 */
export const QrCodeControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QrCodeControllerApiFp(configuration)
    return {
        /**
         * Generates a QR code for a table
         * @summary Get QR code for table
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQRCodeForOrder(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.getQRCodeForOrder(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QrCodeControllerApi - object-oriented interface
 * @export
 * @class QrCodeControllerApi
 * @extends {BaseAPI}
 */
export class QrCodeControllerApi extends BaseAPI {
    /**
     * Generates a QR code for a table
     * @summary Get QR code for table
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QrCodeControllerApi
     */
    public getQRCodeForOrder(id: string, options?: RawAxiosRequestConfig) {
        return QrCodeControllerApiFp(this.configuration).getQRCodeForOrder(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StatsControllerApi - axios parameter creator
 * @export
 */
export const StatsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get n beast or worst rated meals
         * @param {string} bestWorst 
         * @param {number} n 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBestWorstRatedMeals: async (bestWorst: string, n: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bestWorst' is not null or undefined
            assertParamExists('getBestWorstRatedMeals', 'bestWorst', bestWorst)
            // verify required parameter 'n' is not null or undefined
            assertParamExists('getBestWorstRatedMeals', 'n', n)
            const localVarPath = `/api/stats/rated/{bestWorst}/{n}`
                .replace(`{${"bestWorst"}}`, encodeURIComponent(String(bestWorst)))
                .replace(`{${"n"}}`, encodeURIComponent(String(n)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get earnings by year-month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEarningsByYearMonth: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/stats/earnings-by-year-month`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get n most or least popular meals
         * @param {string} mostLeast 
         * @param {number} n 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMostPopularMeals: async (mostLeast: string, n: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mostLeast' is not null or undefined
            assertParamExists('getMostPopularMeals', 'mostLeast', mostLeast)
            // verify required parameter 'n' is not null or undefined
            assertParamExists('getMostPopularMeals', 'n', n)
            const localVarPath = `/api/stats/popular/{mostLeast}/{n}`
                .replace(`{${"mostLeast"}}`, encodeURIComponent(String(mostLeast)))
                .replace(`{${"n"}}`, encodeURIComponent(String(n)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get amout of orders by day and hour
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersByDayAndHour: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/stats/orders-by-day-hour`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatsControllerApi - functional programming interface
 * @export
 */
export const StatsControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StatsControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get n beast or worst rated meals
         * @param {string} bestWorst 
         * @param {number} n 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBestWorstRatedMeals(bestWorst: string, n: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBestWorstRatedMeals(bestWorst, n, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatsControllerApi.getBestWorstRatedMeals']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get earnings by year-month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEarningsByYearMonth(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEarningsByYearMonth(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatsControllerApi.getEarningsByYearMonth']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get n most or least popular meals
         * @param {string} mostLeast 
         * @param {number} n 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMostPopularMeals(mostLeast: string, n: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMostPopularMeals(mostLeast, n, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatsControllerApi.getMostPopularMeals']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get amout of orders by day and hour
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrdersByDayAndHour(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrdersByDayAndHour(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatsControllerApi.getOrdersByDayAndHour']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StatsControllerApi - factory interface
 * @export
 */
export const StatsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StatsControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Get n beast or worst rated meals
         * @param {string} bestWorst 
         * @param {number} n 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBestWorstRatedMeals(bestWorst: string, n: number, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getBestWorstRatedMeals(bestWorst, n, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get earnings by year-month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEarningsByYearMonth(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getEarningsByYearMonth(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get n most or least popular meals
         * @param {string} mostLeast 
         * @param {number} n 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMostPopularMeals(mostLeast: string, n: number, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getMostPopularMeals(mostLeast, n, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get amout of orders by day and hour
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersByDayAndHour(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getOrdersByDayAndHour(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StatsControllerApi - object-oriented interface
 * @export
 * @class StatsControllerApi
 * @extends {BaseAPI}
 */
export class StatsControllerApi extends BaseAPI {
    /**
     * 
     * @summary Get n beast or worst rated meals
     * @param {string} bestWorst 
     * @param {number} n 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsControllerApi
     */
    public getBestWorstRatedMeals(bestWorst: string, n: number, options?: RawAxiosRequestConfig) {
        return StatsControllerApiFp(this.configuration).getBestWorstRatedMeals(bestWorst, n, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get earnings by year-month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsControllerApi
     */
    public getEarningsByYearMonth(options?: RawAxiosRequestConfig) {
        return StatsControllerApiFp(this.configuration).getEarningsByYearMonth(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get n most or least popular meals
     * @param {string} mostLeast 
     * @param {number} n 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsControllerApi
     */
    public getMostPopularMeals(mostLeast: string, n: number, options?: RawAxiosRequestConfig) {
        return StatsControllerApiFp(this.configuration).getMostPopularMeals(mostLeast, n, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get amout of orders by day and hour
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsControllerApi
     */
    public getOrdersByDayAndHour(options?: RawAxiosRequestConfig) {
        return StatsControllerApiFp(this.configuration).getOrdersByDayAndHour(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TableControllerApi - axios parameter creator
 * @export
 */
export const TableControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete table
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTable: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTable', 'id', id)
            const localVarPath = `/api/tables/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all tables
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTables: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tables/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get table by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTableById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTableById', 'id', id)
            const localVarPath = `/api/tables/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save table
         * @param {TableAddCommand} tableAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save: async (tableAddCommand: TableAddCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tableAddCommand' is not null or undefined
            assertParamExists('save', 'tableAddCommand', tableAddCommand)
            const localVarPath = `/api/tables/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tableAddCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update table
         * @param {TableAddCommand} tableAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTable: async (tableAddCommand: TableAddCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tableAddCommand' is not null or undefined
            assertParamExists('updateTable', 'tableAddCommand', tableAddCommand)
            const localVarPath = `/api/tables`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tableAddCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TableControllerApi - functional programming interface
 * @export
 */
export const TableControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TableControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete table
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTable(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTable(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TableControllerApi.deleteTable']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all tables
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTables(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Table>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTables(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TableControllerApi.getAllTables']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get table by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTableById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Table>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTableById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TableControllerApi.getTableById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Save table
         * @param {TableAddCommand} tableAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async save(tableAddCommand: TableAddCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Table>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.save(tableAddCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TableControllerApi.save']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update table
         * @param {TableAddCommand} tableAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTable(tableAddCommand: TableAddCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Table>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTable(tableAddCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TableControllerApi.updateTable']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TableControllerApi - factory interface
 * @export
 */
export const TableControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TableControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete table
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTable(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTable(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all tables
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTables(options?: RawAxiosRequestConfig): AxiosPromise<Array<Table>> {
            return localVarFp.getAllTables(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get table by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTableById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Table> {
            return localVarFp.getTableById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Save table
         * @param {TableAddCommand} tableAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save(tableAddCommand: TableAddCommand, options?: RawAxiosRequestConfig): AxiosPromise<Table> {
            return localVarFp.save(tableAddCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update table
         * @param {TableAddCommand} tableAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTable(tableAddCommand: TableAddCommand, options?: RawAxiosRequestConfig): AxiosPromise<Table> {
            return localVarFp.updateTable(tableAddCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TableControllerApi - object-oriented interface
 * @export
 * @class TableControllerApi
 * @extends {BaseAPI}
 */
export class TableControllerApi extends BaseAPI {
    /**
     * 
     * @summary Delete table
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableControllerApi
     */
    public deleteTable(id: string, options?: RawAxiosRequestConfig) {
        return TableControllerApiFp(this.configuration).deleteTable(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all tables
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableControllerApi
     */
    public getAllTables(options?: RawAxiosRequestConfig) {
        return TableControllerApiFp(this.configuration).getAllTables(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get table by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableControllerApi
     */
    public getTableById(id: string, options?: RawAxiosRequestConfig) {
        return TableControllerApiFp(this.configuration).getTableById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Save table
     * @param {TableAddCommand} tableAddCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableControllerApi
     */
    public save(tableAddCommand: TableAddCommand, options?: RawAxiosRequestConfig) {
        return TableControllerApiFp(this.configuration).save(tableAddCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update table
     * @param {TableAddCommand} tableAddCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableControllerApi
     */
    public updateTable(tableAddCommand: TableAddCommand, options?: RawAxiosRequestConfig) {
        return TableControllerApiFp(this.configuration).updateTable(tableAddCommand, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TableReservationControllerApi - axios parameter creator
 * @export
 */
export const TableReservationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new reservation
         * @param {MakeReservationCommand} makeReservationCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReservation: async (makeReservationCommand: MakeReservationCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'makeReservationCommand' is not null or undefined
            assertParamExists('createReservation', 'makeReservationCommand', makeReservationCommand)
            const localVarPath = `/api/reservations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(makeReservationCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a reservation by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReservationById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteReservationById', 'id', id)
            const localVarPath = `/api/reservations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all reservations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllReservations: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/reservations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get available hours for a specific day
         * @param {string} day 
         * @param {number} reservationDuration 
         * @param {number} minutesToAdd 
         * @param {number} numberOfPeople 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPossibleHoursForDay: async (day: string, reservationDuration: number, minutesToAdd: number, numberOfPeople: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'day' is not null or undefined
            assertParamExists('getPossibleHoursForDay', 'day', day)
            // verify required parameter 'reservationDuration' is not null or undefined
            assertParamExists('getPossibleHoursForDay', 'reservationDuration', reservationDuration)
            // verify required parameter 'minutesToAdd' is not null or undefined
            assertParamExists('getPossibleHoursForDay', 'minutesToAdd', minutesToAdd)
            // verify required parameter 'numberOfPeople' is not null or undefined
            assertParamExists('getPossibleHoursForDay', 'numberOfPeople', numberOfPeople)
            const localVarPath = `/api/reservations/available-hours/{day}`
                .replace(`{${"day"}}`, encodeURIComponent(String(day)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (reservationDuration !== undefined) {
                localVarQueryParameter['reservationDuration'] = reservationDuration;
            }

            if (minutesToAdd !== undefined) {
                localVarQueryParameter['minutesToAdd'] = minutesToAdd;
            }

            if (numberOfPeople !== undefined) {
                localVarQueryParameter['numberOfPeople'] = numberOfPeople;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get available hours for multiple days
         * @param {Array<string>} days 
         * @param {number} reservationDuration 
         * @param {number} minutesToAdd 
         * @param {number} numberOfPeople 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPossibleHoursForDays: async (days: Array<string>, reservationDuration: number, minutesToAdd: number, numberOfPeople: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'days' is not null or undefined
            assertParamExists('getPossibleHoursForDays', 'days', days)
            // verify required parameter 'reservationDuration' is not null or undefined
            assertParamExists('getPossibleHoursForDays', 'reservationDuration', reservationDuration)
            // verify required parameter 'minutesToAdd' is not null or undefined
            assertParamExists('getPossibleHoursForDays', 'minutesToAdd', minutesToAdd)
            // verify required parameter 'numberOfPeople' is not null or undefined
            assertParamExists('getPossibleHoursForDays', 'numberOfPeople', numberOfPeople)
            const localVarPath = `/api/reservations/available-hours`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (days) {
                localVarQueryParameter['days'] = days;
            }

            if (reservationDuration !== undefined) {
                localVarQueryParameter['reservationDuration'] = reservationDuration;
            }

            if (minutesToAdd !== undefined) {
                localVarQueryParameter['minutesToAdd'] = minutesToAdd;
            }

            if (numberOfPeople !== undefined) {
                localVarQueryParameter['numberOfPeople'] = numberOfPeople;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a reservation by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReservationById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getReservationById', 'id', id)
            const localVarPath = `/api/reservations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get reservations for a specific customer
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReservationsForCustomer: async (customerId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getReservationsForCustomer', 'customerId', customerId)
            const localVarPath = `/api/reservations/customer/{customerId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get reservations for a specific day
         * @param {string} day 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReservationsForDay: async (day: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'day' is not null or undefined
            assertParamExists('getReservationsForDay', 'day', day)
            const localVarPath = `/api/reservations/day/{day}`
                .replace(`{${"day"}}`, encodeURIComponent(String(day)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get reservations for a specific table on a given day
         * @param {string} tableId 
         * @param {string} day 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReservationsForTableOnDay: async (tableId: string, day: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tableId' is not null or undefined
            assertParamExists('getReservationsForTableOnDay', 'tableId', tableId)
            // verify required parameter 'day' is not null or undefined
            assertParamExists('getReservationsForTableOnDay', 'day', day)
            const localVarPath = `/api/reservations/table/{tableId}/day/{day}`
                .replace(`{${"tableId"}}`, encodeURIComponent(String(tableId)))
                .replace(`{${"day"}}`, encodeURIComponent(String(day)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TableReservationControllerApi - functional programming interface
 * @export
 */
export const TableReservationControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TableReservationControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new reservation
         * @param {MakeReservationCommand} makeReservationCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReservation(makeReservationCommand: MakeReservationCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TableReservation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReservation(makeReservationCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TableReservationControllerApi.createReservation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a reservation by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReservationById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReservationById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TableReservationControllerApi.deleteReservationById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all reservations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllReservations(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TableReservation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllReservations(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TableReservationControllerApi.getAllReservations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get available hours for a specific day
         * @param {string} day 
         * @param {number} reservationDuration 
         * @param {number} minutesToAdd 
         * @param {number} numberOfPeople 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPossibleHoursForDay(day: string, reservationDuration: number, minutesToAdd: number, numberOfPeople: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LocalTime>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPossibleHoursForDay(day, reservationDuration, minutesToAdd, numberOfPeople, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TableReservationControllerApi.getPossibleHoursForDay']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get available hours for multiple days
         * @param {Array<string>} days 
         * @param {number} reservationDuration 
         * @param {number} minutesToAdd 
         * @param {number} numberOfPeople 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPossibleHoursForDays(days: Array<string>, reservationDuration: number, minutesToAdd: number, numberOfPeople: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PossibleReservationHoursForDayDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPossibleHoursForDays(days, reservationDuration, minutesToAdd, numberOfPeople, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TableReservationControllerApi.getPossibleHoursForDays']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a reservation by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReservationById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TableReservation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReservationById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TableReservationControllerApi.getReservationById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get reservations for a specific customer
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReservationsForCustomer(customerId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TableReservation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReservationsForCustomer(customerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TableReservationControllerApi.getReservationsForCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get reservations for a specific day
         * @param {string} day 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReservationsForDay(day: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TableReservation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReservationsForDay(day, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TableReservationControllerApi.getReservationsForDay']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get reservations for a specific table on a given day
         * @param {string} tableId 
         * @param {string} day 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReservationsForTableOnDay(tableId: string, day: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TableReservation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReservationsForTableOnDay(tableId, day, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TableReservationControllerApi.getReservationsForTableOnDay']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TableReservationControllerApi - factory interface
 * @export
 */
export const TableReservationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TableReservationControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new reservation
         * @param {MakeReservationCommand} makeReservationCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReservation(makeReservationCommand: MakeReservationCommand, options?: RawAxiosRequestConfig): AxiosPromise<TableReservation> {
            return localVarFp.createReservation(makeReservationCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a reservation by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReservationById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteReservationById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all reservations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllReservations(options?: RawAxiosRequestConfig): AxiosPromise<Array<TableReservation>> {
            return localVarFp.getAllReservations(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get available hours for a specific day
         * @param {string} day 
         * @param {number} reservationDuration 
         * @param {number} minutesToAdd 
         * @param {number} numberOfPeople 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPossibleHoursForDay(day: string, reservationDuration: number, minutesToAdd: number, numberOfPeople: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<LocalTime>> {
            return localVarFp.getPossibleHoursForDay(day, reservationDuration, minutesToAdd, numberOfPeople, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get available hours for multiple days
         * @param {Array<string>} days 
         * @param {number} reservationDuration 
         * @param {number} minutesToAdd 
         * @param {number} numberOfPeople 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPossibleHoursForDays(days: Array<string>, reservationDuration: number, minutesToAdd: number, numberOfPeople: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<PossibleReservationHoursForDayDTO>> {
            return localVarFp.getPossibleHoursForDays(days, reservationDuration, minutesToAdd, numberOfPeople, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a reservation by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReservationById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<TableReservation> {
            return localVarFp.getReservationById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get reservations for a specific customer
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReservationsForCustomer(customerId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<TableReservation>> {
            return localVarFp.getReservationsForCustomer(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get reservations for a specific day
         * @param {string} day 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReservationsForDay(day: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<TableReservation>> {
            return localVarFp.getReservationsForDay(day, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get reservations for a specific table on a given day
         * @param {string} tableId 
         * @param {string} day 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReservationsForTableOnDay(tableId: string, day: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<TableReservation>> {
            return localVarFp.getReservationsForTableOnDay(tableId, day, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TableReservationControllerApi - object-oriented interface
 * @export
 * @class TableReservationControllerApi
 * @extends {BaseAPI}
 */
export class TableReservationControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a new reservation
     * @param {MakeReservationCommand} makeReservationCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableReservationControllerApi
     */
    public createReservation(makeReservationCommand: MakeReservationCommand, options?: RawAxiosRequestConfig) {
        return TableReservationControllerApiFp(this.configuration).createReservation(makeReservationCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a reservation by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableReservationControllerApi
     */
    public deleteReservationById(id: number, options?: RawAxiosRequestConfig) {
        return TableReservationControllerApiFp(this.configuration).deleteReservationById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all reservations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableReservationControllerApi
     */
    public getAllReservations(options?: RawAxiosRequestConfig) {
        return TableReservationControllerApiFp(this.configuration).getAllReservations(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get available hours for a specific day
     * @param {string} day 
     * @param {number} reservationDuration 
     * @param {number} minutesToAdd 
     * @param {number} numberOfPeople 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableReservationControllerApi
     */
    public getPossibleHoursForDay(day: string, reservationDuration: number, minutesToAdd: number, numberOfPeople: number, options?: RawAxiosRequestConfig) {
        return TableReservationControllerApiFp(this.configuration).getPossibleHoursForDay(day, reservationDuration, minutesToAdd, numberOfPeople, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get available hours for multiple days
     * @param {Array<string>} days 
     * @param {number} reservationDuration 
     * @param {number} minutesToAdd 
     * @param {number} numberOfPeople 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableReservationControllerApi
     */
    public getPossibleHoursForDays(days: Array<string>, reservationDuration: number, minutesToAdd: number, numberOfPeople: number, options?: RawAxiosRequestConfig) {
        return TableReservationControllerApiFp(this.configuration).getPossibleHoursForDays(days, reservationDuration, minutesToAdd, numberOfPeople, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a reservation by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableReservationControllerApi
     */
    public getReservationById(id: number, options?: RawAxiosRequestConfig) {
        return TableReservationControllerApiFp(this.configuration).getReservationById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get reservations for a specific customer
     * @param {number} customerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableReservationControllerApi
     */
    public getReservationsForCustomer(customerId: number, options?: RawAxiosRequestConfig) {
        return TableReservationControllerApiFp(this.configuration).getReservationsForCustomer(customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get reservations for a specific day
     * @param {string} day 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableReservationControllerApi
     */
    public getReservationsForDay(day: string, options?: RawAxiosRequestConfig) {
        return TableReservationControllerApiFp(this.configuration).getReservationsForDay(day, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get reservations for a specific table on a given day
     * @param {string} tableId 
     * @param {string} day 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableReservationControllerApi
     */
    public getReservationsForTableOnDay(tableId: string, day: string, options?: RawAxiosRequestConfig) {
        return TableReservationControllerApiFp(this.configuration).getReservationsForTableOnDay(tableId, day, options).then((request) => request(this.axios, this.basePath));
    }
}



