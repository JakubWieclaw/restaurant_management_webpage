/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Model of a category
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'photographUrl'?: string;
}
/**
 * 
 * @export
 * @interface CategoryAddCommand
 */
export interface CategoryAddCommand {
    /**
     * 
     * @type {string}
     * @memberof CategoryAddCommand
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CategoryAddCommand
     */
    'photographUrl'?: string;
}
/**
 * 
 * @export
 * @interface Config
 */
export interface Config {
    /**
     * 
     * @type {number}
     * @memberof Config
     */
    'id'?: number;
    /**
     * Name of the restaurant
     * @type {string}
     * @memberof Config
     */
    'restaurantName': string;
    /**
     * Postal code of the restaurant
     * @type {string}
     * @memberof Config
     */
    'postalCode': string;
    /**
     * City of the restaurant
     * @type {string}
     * @memberof Config
     */
    'city': string;
    /**
     * Street of the restaurant
     * @type {string}
     * @memberof Config
     */
    'street': string;
    /**
     * Phone number of the restaurant
     * @type {string}
     * @memberof Config
     */
    'phoneNumber': string;
    /**
     * Email of the restaurant
     * @type {string}
     * @memberof Config
     */
    'email': string;
    /**
     * URL for the logo
     * @type {string}
     * @memberof Config
     */
    'logoUrl': string;
}
/**
 * 
 * @export
 * @interface ConfigAddCommand
 */
export interface ConfigAddCommand {
    /**
     * Name of the restaurant
     * @type {string}
     * @memberof ConfigAddCommand
     */
    'restaurantName': string;
    /**
     * Postal code of the restaurant
     * @type {string}
     * @memberof ConfigAddCommand
     */
    'postalCode': string;
    /**
     * City of the restaurant
     * @type {string}
     * @memberof ConfigAddCommand
     */
    'city': string;
    /**
     * Street of the restaurant
     * @type {string}
     * @memberof ConfigAddCommand
     */
    'street': string;
    /**
     * Phone number of the restaurant
     * @type {string}
     * @memberof ConfigAddCommand
     */
    'phoneNumber': string;
    /**
     * Email of the restaurant
     * @type {string}
     * @memberof ConfigAddCommand
     */
    'email': string;
    /**
     * URL for the logo
     * @type {string}
     * @memberof ConfigAddCommand
     */
    'logoUrl': string;
    /**
     * Opening hours of the restaurant
     * @type {Array<OpeningHour>}
     * @memberof ConfigAddCommand
     */
    'openingHours'?: Array<OpeningHour>;
    /**
     * Delivery prices of the restaurant
     * @type {Array<DeliveryPricing>}
     * @memberof ConfigAddCommand
     */
    'deliveryPricings'?: Array<DeliveryPricing>;
}
/**
 * Delivery prices of the restaurant
 * @export
 * @interface DeliveryPricing
 */
export interface DeliveryPricing {
    /**
     * 
     * @type {number}
     * @memberof DeliveryPricing
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof DeliveryPricing
     */
    'maximumRange': number;
    /**
     * 
     * @type {number}
     * @memberof DeliveryPricing
     */
    'price': number;
}
/**
 * 
 * @export
 * @interface LocalTime
 */
export interface LocalTime {
    /**
     * 
     * @type {number}
     * @memberof LocalTime
     */
    'hour'?: number;
    /**
     * 
     * @type {number}
     * @memberof LocalTime
     */
    'minute'?: number;
    /**
     * 
     * @type {number}
     * @memberof LocalTime
     */
    'second'?: number;
    /**
     * 
     * @type {number}
     * @memberof LocalTime
     */
    'nano'?: number;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password'?: string;
}
/**
 * Model of a meal
 * @export
 * @interface Meal
 */
export interface Meal {
    /**
     * 
     * @type {number}
     * @memberof Meal
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Meal
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof Meal
     */
    'price'?: number;
    /**
     * 
     * @type {string}
     * @memberof Meal
     */
    'photographUrl'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Meal
     */
    'ingredients'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Meal
     */
    'weightOrVolume'?: number;
    /**
     * 
     * @type {string}
     * @memberof Meal
     */
    'unitType'?: MealUnitTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof Meal
     */
    'categoryId': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Meal
     */
    'allergens'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Meal
     */
    'calories'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Meal
     */
    'unitTypeMandatory'?: boolean;
}

export const MealUnitTypeEnum = {
    Gramy: 'GRAMY',
    Millilitry: 'MILLILITRY'
} as const;

export type MealUnitTypeEnum = typeof MealUnitTypeEnum[keyof typeof MealUnitTypeEnum];

/**
 * 
 * @export
 * @interface MealAddCommand
 */
export interface MealAddCommand {
    /**
     * 
     * @type {string}
     * @memberof MealAddCommand
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof MealAddCommand
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof MealAddCommand
     */
    'photographUrl'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MealAddCommand
     */
    'ingredients'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof MealAddCommand
     */
    'weightOrVolume'?: number;
    /**
     * 
     * @type {string}
     * @memberof MealAddCommand
     */
    'unitType'?: MealAddCommandUnitTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof MealAddCommand
     */
    'categoryId': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof MealAddCommand
     */
    'allergens'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof MealAddCommand
     */
    'calories'?: number;
}

export const MealAddCommandUnitTypeEnum = {
    Gramy: 'GRAMY',
    Millilitry: 'MILLILITRY'
} as const;

export type MealAddCommandUnitTypeEnum = typeof MealAddCommandUnitTypeEnum[keyof typeof MealAddCommandUnitTypeEnum];

/**
 * Opening hours of the restaurant
 * @export
 * @interface OpeningHour
 */
export interface OpeningHour {
    /**
     * 
     * @type {number}
     * @memberof OpeningHour
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof OpeningHour
     */
    'day': OpeningHourDayEnum;
    /**
     * 
     * @type {LocalTime}
     * @memberof OpeningHour
     */
    'openingTime': LocalTime;
    /**
     * 
     * @type {LocalTime}
     * @memberof OpeningHour
     */
    'closingTime': LocalTime;
}

export const OpeningHourDayEnum = {
    Monday: 'MONDAY',
    Tuesday: 'TUESDAY',
    Wednesday: 'WEDNESDAY',
    Thursday: 'THURSDAY',
    Friday: 'FRIDAY',
    Saturday: 'SATURDAY',
    Sunday: 'SUNDAY'
} as const;

export type OpeningHourDayEnum = typeof OpeningHourDayEnum[keyof typeof OpeningHourDayEnum];

/**
 * 
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'surname': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'password': string;
    /**
     * 
     * @type {boolean}
     * @memberof RegisterRequest
     */
    'isAdmin'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RegisterRequest
     */
    'admin'?: boolean;
}

/**
 * AuthControllerApi - axios parameter creator
 * @export
 */
export const AuthControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginRequest: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('login', 'loginRequest', loginRequest)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser: async (registerRequest: RegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerRequest' is not null or undefined
            assertParamExists('registerUser', 'registerRequest', registerRequest)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthControllerApi - functional programming interface
 * @export
 */
export const AuthControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthControllerApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerUser(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerUser(registerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthControllerApi.registerUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthControllerApi - factory interface
 * @export
 */
export const AuthControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.login(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.registerUser(registerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthControllerApi - object-oriented interface
 * @export
 * @class AuthControllerApi
 * @extends {BaseAPI}
 */
export class AuthControllerApi extends BaseAPI {
    /**
     * 
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public login(loginRequest: LoginRequest, options?: RawAxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).login(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterRequest} registerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public registerUser(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).registerUser(registerRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CategoryControllerApi - axios parameter creator
 * @export
 */
export const CategoryControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a category
         * @param {CategoryAddCommand} categoryAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCategory: async (categoryAddCommand: CategoryAddCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryAddCommand' is not null or undefined
            assertParamExists('addCategory', 'categoryAddCommand', categoryAddCommand)
            const localVarPath = `/api/categories/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryAddCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a category by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategoryById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCategoryById', 'id', id)
            const localVarPath = `/api/categories/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategories: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/categories/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get category by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCategoryById', 'id', id)
            const localVarPath = `/api/categories/get/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a category by id
         * @param {number} id 
         * @param {CategoryAddCommand} categoryAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory: async (id: number, categoryAddCommand: CategoryAddCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCategory', 'id', id)
            // verify required parameter 'categoryAddCommand' is not null or undefined
            assertParamExists('updateCategory', 'categoryAddCommand', categoryAddCommand)
            const localVarPath = `/api/categories/update/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryAddCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryControllerApi - functional programming interface
 * @export
 */
export const CategoryControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a category
         * @param {CategoryAddCommand} categoryAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCategory(categoryAddCommand: CategoryAddCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCategory(categoryAddCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryControllerApi.addCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a category by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategoryById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCategoryById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryControllerApi.deleteCategoryById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCategories(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCategories(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryControllerApi.getAllCategories']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get category by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategoryById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategoryById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryControllerApi.getCategoryById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a category by id
         * @param {number} id 
         * @param {CategoryAddCommand} categoryAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCategory(id: number, categoryAddCommand: CategoryAddCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCategory(id, categoryAddCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryControllerApi.updateCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CategoryControllerApi - factory interface
 * @export
 */
export const CategoryControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a category
         * @param {CategoryAddCommand} categoryAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCategory(categoryAddCommand: CategoryAddCommand, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.addCategory(categoryAddCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a category by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategoryById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.deleteCategoryById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategories(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getAllCategories(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get category by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Category> {
            return localVarFp.getCategoryById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a category by id
         * @param {number} id 
         * @param {CategoryAddCommand} categoryAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory(id: number, categoryAddCommand: CategoryAddCommand, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateCategory(id, categoryAddCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoryControllerApi - object-oriented interface
 * @export
 * @class CategoryControllerApi
 * @extends {BaseAPI}
 */
export class CategoryControllerApi extends BaseAPI {
    /**
     * 
     * @summary Add a category
     * @param {CategoryAddCommand} categoryAddCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public addCategory(categoryAddCommand: CategoryAddCommand, options?: RawAxiosRequestConfig) {
        return CategoryControllerApiFp(this.configuration).addCategory(categoryAddCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a category by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public deleteCategoryById(id: number, options?: RawAxiosRequestConfig) {
        return CategoryControllerApiFp(this.configuration).deleteCategoryById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public getAllCategories(options?: RawAxiosRequestConfig) {
        return CategoryControllerApiFp(this.configuration).getAllCategories(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get category by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public getCategoryById(id: number, options?: RawAxiosRequestConfig) {
        return CategoryControllerApiFp(this.configuration).getCategoryById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a category by id
     * @param {number} id 
     * @param {CategoryAddCommand} categoryAddCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public updateCategory(id: number, categoryAddCommand: CategoryAddCommand, options?: RawAxiosRequestConfig) {
        return CategoryControllerApiFp(this.configuration).updateCategory(id, categoryAddCommand, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ConfigControllerApi - axios parameter creator
 * @export
 */
export const ConfigControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfig: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/api/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get delivery prices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeliveryPrices: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/api/config/delivery-prices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get opening hours
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpeningHours: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/api/config/opening-hours`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Initialize system
         * @param {ConfigAddCommand} configAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initializeSystem: async (configAddCommand: ConfigAddCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configAddCommand' is not null or undefined
            assertParamExists('initializeSystem', 'configAddCommand', configAddCommand)
            const localVarPath = `/admin/api/config/initialize-system`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(configAddCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove config, delivery prices and opening hours, only for testing purposes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeConfigs: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/api/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigControllerApi - functional programming interface
 * @export
 */
export const ConfigControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConfigControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConfig(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Config>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConfig(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigControllerApi.getConfig']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get delivery prices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeliveryPrices(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeliveryPrices(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigControllerApi.getDeliveryPrices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get opening hours
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOpeningHours(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOpeningHours(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigControllerApi.getOpeningHours']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Initialize system
         * @param {ConfigAddCommand} configAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initializeSystem(configAddCommand: ConfigAddCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.initializeSystem(configAddCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigControllerApi.initializeSystem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove config, delivery prices and opening hours, only for testing purposes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeConfigs(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeConfigs(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigControllerApi.removeConfigs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ConfigControllerApi - factory interface
 * @export
 */
export const ConfigControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConfigControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Get config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfig(options?: RawAxiosRequestConfig): AxiosPromise<Config> {
            return localVarFp.getConfig(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get delivery prices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeliveryPrices(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getDeliveryPrices(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get opening hours
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpeningHours(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getOpeningHours(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Initialize system
         * @param {ConfigAddCommand} configAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initializeSystem(configAddCommand: ConfigAddCommand, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.initializeSystem(configAddCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove config, delivery prices and opening hours, only for testing purposes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeConfigs(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.removeConfigs(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConfigControllerApi - object-oriented interface
 * @export
 * @class ConfigControllerApi
 * @extends {BaseAPI}
 */
export class ConfigControllerApi extends BaseAPI {
    /**
     * 
     * @summary Get config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigControllerApi
     */
    public getConfig(options?: RawAxiosRequestConfig) {
        return ConfigControllerApiFp(this.configuration).getConfig(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get delivery prices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigControllerApi
     */
    public getDeliveryPrices(options?: RawAxiosRequestConfig) {
        return ConfigControllerApiFp(this.configuration).getDeliveryPrices(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get opening hours
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigControllerApi
     */
    public getOpeningHours(options?: RawAxiosRequestConfig) {
        return ConfigControllerApiFp(this.configuration).getOpeningHours(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Initialize system
     * @param {ConfigAddCommand} configAddCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigControllerApi
     */
    public initializeSystem(configAddCommand: ConfigAddCommand, options?: RawAxiosRequestConfig) {
        return ConfigControllerApiFp(this.configuration).initializeSystem(configAddCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove config, delivery prices and opening hours, only for testing purposes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigControllerApi
     */
    public removeConfigs(options?: RawAxiosRequestConfig) {
        return ConfigControllerApiFp(this.configuration).removeConfigs(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MealControllerApi - axios parameter creator
 * @export
 */
export const MealControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a meal
         * @param {MealAddCommand} mealAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMeal: async (mealAddCommand: MealAddCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mealAddCommand' is not null or undefined
            assertParamExists('addMeal', 'mealAddCommand', mealAddCommand)
            const localVarPath = `/api/meals/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mealAddCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete all meals with a given category id
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllMealsByCategory: async (categoryId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('deleteAllMealsByCategory', 'categoryId', categoryId)
            const localVarPath = `/api/meals/delete-meals/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a meal by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMealById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteMealById', 'id', id)
            const localVarPath = `/api/meals/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all meals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMeals: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/meals/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get meal by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMealById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMealById', 'id', id)
            const localVarPath = `/api/meals/get/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all meals with a given category id
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMealsByCategory: async (categoryId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('getMealsByCategory', 'categoryId', categoryId)
            const localVarPath = `/api/meals/get-meals/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search meals by name
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMealsByName: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('searchMealsByName', 'name', name)
            const localVarPath = `/api/meals/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a meal by id
         * @param {number} id 
         * @param {MealAddCommand} mealAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMeal: async (id: number, mealAddCommand: MealAddCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateMeal', 'id', id)
            // verify required parameter 'mealAddCommand' is not null or undefined
            assertParamExists('updateMeal', 'mealAddCommand', mealAddCommand)
            const localVarPath = `/api/meals/update/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mealAddCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MealControllerApi - functional programming interface
 * @export
 */
export const MealControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MealControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a meal
         * @param {MealAddCommand} mealAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMeal(mealAddCommand: MealAddCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMeal(mealAddCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MealControllerApi.addMeal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete all meals with a given category id
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllMealsByCategory(categoryId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAllMealsByCategory(categoryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MealControllerApi.deleteAllMealsByCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a meal by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMealById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMealById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MealControllerApi.deleteMealById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all meals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllMeals(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMeals(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MealControllerApi.getAllMeals']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get meal by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMealById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Meal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMealById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MealControllerApi.getMealById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all meals with a given category id
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMealsByCategory(categoryId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMealsByCategory(categoryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MealControllerApi.getMealsByCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Search meals by name
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchMealsByName(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchMealsByName(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MealControllerApi.searchMealsByName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a meal by id
         * @param {number} id 
         * @param {MealAddCommand} mealAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMeal(id: number, mealAddCommand: MealAddCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMeal(id, mealAddCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MealControllerApi.updateMeal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MealControllerApi - factory interface
 * @export
 */
export const MealControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MealControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a meal
         * @param {MealAddCommand} mealAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMeal(mealAddCommand: MealAddCommand, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.addMeal(mealAddCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete all meals with a given category id
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllMealsByCategory(categoryId: number, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.deleteAllMealsByCategory(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a meal by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMealById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteMealById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all meals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMeals(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getAllMeals(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get meal by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMealById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Meal> {
            return localVarFp.getMealById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all meals with a given category id
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMealsByCategory(categoryId: number, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getMealsByCategory(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search meals by name
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMealsByName(name: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.searchMealsByName(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a meal by id
         * @param {number} id 
         * @param {MealAddCommand} mealAddCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMeal(id: number, mealAddCommand: MealAddCommand, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateMeal(id, mealAddCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MealControllerApi - object-oriented interface
 * @export
 * @class MealControllerApi
 * @extends {BaseAPI}
 */
export class MealControllerApi extends BaseAPI {
    /**
     * 
     * @summary Add a meal
     * @param {MealAddCommand} mealAddCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealControllerApi
     */
    public addMeal(mealAddCommand: MealAddCommand, options?: RawAxiosRequestConfig) {
        return MealControllerApiFp(this.configuration).addMeal(mealAddCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete all meals with a given category id
     * @param {number} categoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealControllerApi
     */
    public deleteAllMealsByCategory(categoryId: number, options?: RawAxiosRequestConfig) {
        return MealControllerApiFp(this.configuration).deleteAllMealsByCategory(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a meal by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealControllerApi
     */
    public deleteMealById(id: number, options?: RawAxiosRequestConfig) {
        return MealControllerApiFp(this.configuration).deleteMealById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all meals
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealControllerApi
     */
    public getAllMeals(options?: RawAxiosRequestConfig) {
        return MealControllerApiFp(this.configuration).getAllMeals(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get meal by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealControllerApi
     */
    public getMealById(id: number, options?: RawAxiosRequestConfig) {
        return MealControllerApiFp(this.configuration).getMealById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all meals with a given category id
     * @param {number} categoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealControllerApi
     */
    public getMealsByCategory(categoryId: number, options?: RawAxiosRequestConfig) {
        return MealControllerApiFp(this.configuration).getMealsByCategory(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search meals by name
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealControllerApi
     */
    public searchMealsByName(name: string, options?: RawAxiosRequestConfig) {
        return MealControllerApiFp(this.configuration).searchMealsByName(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a meal by id
     * @param {number} id 
     * @param {MealAddCommand} mealAddCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealControllerApi
     */
    public updateMeal(id: number, mealAddCommand: MealAddCommand, options?: RawAxiosRequestConfig) {
        return MealControllerApiFp(this.configuration).updateMeal(id, mealAddCommand, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MessagesControllerApi - axios parameter creator
 * @export
 */
export const MessagesControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessages: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMessages: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessagesControllerApi - functional programming interface
 * @export
 */
export const MessagesControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessagesControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessages(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessages(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessagesControllerApi.getMessages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMessages(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postMessages(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessagesControllerApi.postMessages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MessagesControllerApi - factory interface
 * @export
 */
export const MessagesControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessagesControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessages(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getMessages(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMessages(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.postMessages(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MessagesControllerApi - object-oriented interface
 * @export
 * @class MessagesControllerApi
 * @extends {BaseAPI}
 */
export class MessagesControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesControllerApi
     */
    public getMessages(options?: RawAxiosRequestConfig) {
        return MessagesControllerApiFp(this.configuration).getMessages(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesControllerApi
     */
    public postMessages(options?: RawAxiosRequestConfig) {
        return MessagesControllerApiFp(this.configuration).postMessages(options).then((request) => request(this.axios, this.basePath));
    }
}



